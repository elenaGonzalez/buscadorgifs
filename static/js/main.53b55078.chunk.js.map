{"version":3,"sources":["components/Gif.js","components/ListOfGifs.js","services/getGifs.js","App.js","serviceWorker.js","index.js"],"names":["Gif","title","id","url","className","alt","src","href","onClick","Swal","fire","text","imageUrl","imageWidth","imageHeight","imageAlt","handleClick","ListOfGifs","gifs","map","gif","key","apiKey","getGifs","keyword","apiURL","fetch","then","r","json","response","data","Array","isArray","images","downsized_medium","App","useState","setGifs","busqueda","setBusqueda","useEffect","type","onChange","event","target","value","handleChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSAIe,SAASA,EAAT,GAA+B,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAAIC,EAAK,EAALA,IAYpC,OACA,yBAAKC,UAAU,QACX,+BAAQF,GACR,yBAAKE,UAAU,eAAeC,IAAKJ,EAAOK,IAAKH,IAC/C,yBAAKC,UAAU,aACX,4BAAKH,GACL,uBAAGG,UAAU,aAAb,uBACA,uBAAGG,KAAK,IAAIH,UAAU,kBAAkBI,QAAU,kBAjBtC,SAACL,EAAKF,GACtBQ,IAAKC,KAAK,CACNT,MAAOA,EACPU,KAAM,sBACNC,SAAUT,EACVU,WAAY,IACZC,YAAa,IACbC,SAAUd,IAU8Ce,CAAYb,EAAKF,KAAzE,SCpBG,SAASgB,EAAT,GACX,OADyC,EAARC,KAExBC,KAAI,SAAAC,GAAG,OACJ,kBAAC,EAAD,CACIC,IAAKD,EAAIlB,GACTD,MAAOmB,EAAInB,MACXE,IAAKiB,EAAIjB,SCT7B,IAAMmB,EAAS,mCAEA,SAASC,IAAgC,IAAD,yDAAH,GAAG,IAAtBC,eAAsB,MAAZ,MAAY,EAC7CC,EAAM,uDAAmDH,EAAnD,cAA+DE,EAA/D,wCACZ,OAAOE,MAAMD,GACZE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAa,IACVC,EAAQD,EAARC,KAEP,GAAGC,MAAMC,QAAQF,GAMf,OALaA,EAAKZ,KAAI,SAAAC,GAAQ,IACnBc,EAAqBd,EAArBc,OAEP,MAAO,CAACjC,MAFoBmB,EAAbnB,MAEAC,GAFakB,EAANlB,GAEHC,IADL+B,EAAOC,iBAAdhC,WC0BJiC,MAjCf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACPnB,EADO,KACDoB,EADC,OAEkBD,mBAAS,IAF3B,mBAEPE,EAFO,KAEGC,EAFH,KAmBb,OAfAC,qBAAU,WACTlB,EAAQ,CAAC,QAAU,QAAQI,MAAK,SAAAT,GAAI,OAAIoB,EAAQpB,QAC9C,IAcD,yBAAKd,UAAU,OACb,yBAAKA,UAAU,qCAAf,oBACA,uBAAGA,UAAU,aACb,2BAAOsC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAVb,SAACA,GACnBJ,EAAY,CACV,QAAWI,EAAMC,OAAOC,QAQgBC,CAAaH,IAAQI,YAAY,yBACzE,4BAAQN,KAAK,SAAStC,UAAU,kBAAkBI,QAAS,SAACoC,GAf9DrB,EAAQgB,GACPZ,MAAK,SAAAT,GAAI,OAAIoB,EAAQpB,QAcpB,WAEA,yBAAKd,UAAU,cACb,kBAACa,EAAD,CAAYC,KAAMA,OCpBN+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53b55078.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Gif.css\"\nimport Swal from \"sweetalert2\"\n\nexport default function Gif({title, id, url}){\n\n    const handleClick = (url, title) => {\n        Swal.fire({\n            title: title,\n            text: 'Tu gif seleccionado',\n            imageUrl: url,\n            imageWidth: 350,\n            imageHeight: 200,\n            imageAlt: title,\n          })\n    }\n    return (\n    <div className=\"card\" >\n        <small>{id}</small>\n        <img className=\"card-img-top\" alt={title} src={url}></img>\n        <div className=\"card-body\">\n            <h5>{title}</h5>\n            <p className=\"card-text\">Gif desde API Giphy</p>\n            <a href=\"#\" className=\"btn btn-primary\" onClick={ () => handleClick(url, title) }>Ver</a>\n        </div>    \n  </div>  \n    )\n}","import React from \"react\"\nimport Gif from './Gif'\n\nexport default function ListOfGifs({ gifs }) {\n    return (\n        gifs.map(gif =>\n                <Gif\n                    key={gif.id}\n                    title={gif.title}\n                    url={gif.url}\n                />\n            )\n    )\n}","const apiKey = 'QCKsmMei3iaM4muVOxWwtUNrRLuPEVLZ'\n\nexport default function getGifs({keyword = \"dog\"} = {}){\n    const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${keyword}s&limit=25&offset=0&rating=g&lang=en`;\n    return fetch(apiURL)\n    .then(r => r.json())\n    .then(response => {\n      const {data} = response\n\n      if(Array.isArray(data)){\n        const gifs = data.map(gif => {\n            const {images, title, id} = gif\n            const {url} = images.downsized_medium\n            return {title, id, url}\n        })\n        return gifs\n      }\n    })\n}\n  ","import React,{useEffect, useState} from 'react'\nimport './App.css'\nimport ListOfGifs from './components/ListOfGifs'\nimport getGifs from './services/getGifs'\n\nfunction App() {\n const [gifs, setGifs]= useState([])\n const [busqueda, setBusqueda] = useState({})\n  \n  useEffect(function(){\n   getGifs({'keyword':'cat'}).then(gifs => setGifs(gifs))\n  }, [])\n  \n  const handleClick= (event) =>{\n    getGifs(busqueda)\n    .then(gifs => setGifs(gifs))\n  }\n\n  const handleChange= (event) =>{\n    setBusqueda({\n      'keyword': event.target.value\n    })\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"navbar navbar-dark bg-dark blanco\">Buscador de Gifs</div>\n      <p className=\"contenido\">\n      <input type=\"text\" onChange={(event) => handleChange(event)} placeholder=\"Ingrese gif a buscar\"/>\n      <button type=\"button\" className=\"btn btn-primary\" onClick={(event)=>handleClick(event)}>Buscar</button>\n      </p>\n      <div className=\"contenedor\">\n        <ListOfGifs gifs={gifs} />\n      </div>  \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}